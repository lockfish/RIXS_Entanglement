import numpy as np
import sys
sys.append('/tren/edrixs/scripts')
from witness import dimer_witness
from witness import calc_RIXS_dimerTa, conjugate_RIXS_dimerTa
from witness import QFI_denom_dimerTa, calc_FQ_dimerTa

witness = dimer_witness(folder='/project/tren/edrixs/calc_Ba3TaIr2O9')

# polarized, Emap, rixs calculation (with conjugate part)
RIXS_params = dict(T=9., Gam_c=2.47, sigma0=0.15, sigmas=[0.022,0.022,0.022,0.022,0.054,0.054],
                   fraction=0.5, omega=np.arange(-570,-540,0.3), eloss=np.arange(0.,10.0,0.005), 
                   eline=None, folder=witness.folder)

motors = np.vstack([[-0.2773941488281869, -0.2659741791152685, 9.51042684165467, 43.264375, 9.81525, -93.663173, -10.0],
                    [-0.26764896087249423, -0.273302932756571, 10.51087405002826, 47.98975, 12.9845, -93.576479, -10.0],
                    [-0.2577883546729399, -0.2805792776763275, 11.510507877509921, 52.808, 16.063875, -93.504979, -10.0],
                    [-0.24777219675676215, -0.28779323774242505, 12.509375498043902, 57.73175, 19.0925, -93.445016, -10.0],
                    [-0.23796699084652193, -0.29510625975440596, 13.509375345735329, 62.78675, 22.101, -93.394073, -10.0],
                    [-0.22785287701054702, -0.30221098200350494, 14.507727481478634, 67.976875, 25.115875, -93.349547, -10.0],
                    [-0.22341693910140217, -0.30610439562840724, 15.009870255621223, 70.650125, 26.633375, -93.33021, -10.0],
                    [-0.2180022136685174, -0.30950033549205264, 15.507542476207073, 73.343, 28.1615, -93.31136, -10.0],
                    [-0.21346254040160886, -0.31339680456990965, 16.009171507913727, 76.10825, 29.703375, -93.294785, -10.0],
                    [-0.20821606842705367, -0.31680014487519276, 16.507547237513325, 78.907625, 31.262125, -93.277723, -10.0],
                    [-0.20356182986295102, -0.3206686216079151, 17.008601568605542, 81.781875, 32.841, -93.26326, -10.0],
                    [-0.19849298265545512, -0.32414055133336717, 17.50771083979936, 84.708125, 34.44375, -93.248066, -10.0],
                    [-0.19360491108270322, -0.32791598960334883, 18.00789856761717, 87.711875, 36.07425, -93.235229, -10.0],
                    [-0.18850285302241201, -0.33138267089740425, 18.506986904695648, 90.786375, 37.73675, -93.22166, -10.0],
                    [-0.18369770751773082, -0.3351495940271972, 19.007283337061917, 93.955875, 39.436125, -93.20996, -10.0],
                    [-0.17973557818122593, -0.3379546434534219, 19.406928947872096, 96.55675, 40.826125, -93.200047, -10.0]])

L = 18.4
H = np.interp(L, motors[:,2], motors[:,0])
K = np.interp(L, motors[:,2], motors[:,1])
HKL = np.array([H, K, L])
tth = np.interp(L, motors[:,2], motors[:,3])
th  = np.interp(L, motors[:,2], motors[:,4])
chi = np.interp(L, motors[:,2], motors[:,5])
phi = np.interp(L, motors[:,2], motors[:,6])

rixs = calc_RIXS_dimerTa(tth=tth, th=th, chi=chi, phi=phi, HKL=HKL, **RIXS_params)
rixs_Emap = dict(pol=[0,1], omega=RIXS_params['omega'], eloss=RIXS_params['eloss'], rixs=np.squeeze(rixs))
np.savez(witness.folder+'/pol/rixs_Emap.npz', **rixs_Emap)

conjugate_rixs = conjugate_RIXS_dimerTa(tth=tth, th=th, chi=chi, phi=phi, HKL=HKL, **RIXS_params)
conjugate_rixs_Emap = dict(pol=[0,1], omega=RIXS_params['omega'], eloss=RIXS_params['eloss'], rixs=np.squeeze(conjugate_rixs))
np.savez(witness.folder+'/pol/conjugate_rixs_Emap.npz', **conjugate_rixs_Emap)

# polarized, Mmap, rixs calculation (with conjugate part)
RIXS_params = dict(T=9., Gam_c=2.47, sigma0=0.15, sigmas=[0.022,0.022,0.022,0.022,0.054,0.054],
                   fraction=0.5, omega=-559, eloss=np.arange(0.,10.0,0.005), eline=None, folder=witness.folder)

motors = np.vstack([[-0.37135718, -0.19678939, 0.0,  6.35613593, -93.84443325,  -35.71702316, -10.],
                    [-0.36642012, -0.20042758, 0.5,  6.70426443, -70.27088312, -112.93945895, -10.],
                    [-0.36148305, -0.20406577, 1.0,  7.69383586, -54.60755422, -102.08468304, -10.],
                    [-0.35654599, -0.20770396, 1.5,  9.11950715, -42.55814882,  -98.79459525, -10.],
                    [-0.35160893, -0.21134215, 2.0, 10.81173739, -33.62642692,  -97.21722821, -10.],
                    [-0.34667186, -0.21498034, 2.5, 12.66610405, -26.87058629,  -96.29276610, -10.],
                    [-0.34173480, -0.21861853, 3.0, 14.62328021, -21.57673293,  -95.68563709, -10.],
                    [-0.33679773, -0.22225672, 3.5, 16.64946876, -17.27553243,  -95.25647221, -10.],
                    [-0.33186067, -0.22589491, 4.0, 18.72485802, -13.66522264,  -94.93705831, -10.],
                    [-0.32692361, -0.22953311, 4.5, 20.83746597, -10.54905286,  -94.69008224, -10.],
                    [-0.32198654, -0.23317130, 5.0, 22.97986626,  -7.79546702,  -94.49341877, -10.],
                    [-0.31704948, -0.23680949, 5.5, 25.14739707,  -5.31403908,  -94.33311852, -10.],
                    [-0.31211241, -0.24044768, 6.0, 27.33714508,  -3.04092539,  -94.19995153, -10.],
                    [-0.30717535, -0.24408587, 6.5, 29.54734754,  -0.92991142,  -94.08756742, -10.],
                    [-0.30223829, -0.24772406, 7.0, 31.77702859,   1.05323073,  -93.99145380, -10.],
                    [-0.29730122, -0.25136225, 7.5, 34.02577160,   2.93438842,  -93.90831624, -10.],
                    [-0.29236416, -0.25500044, 8.0, 36.29357337,   4.73352253,  -93.83569342, -10.],
                    [-0.28742710, -0.25863863, 8.5, 38.58074920,   6.46630300,  -93.77170940, -10.],
                    [-0.28249003, -0.26227682, 9.0, 40.88787072,   8.14524100,  -93.71490943, -10.],
                    [-0.27739414882818690, -0.26597417911526850, 9.5104268416546700, 43.264375,  9.815250, -93.663173, -10.0],
                    [-0.26764896087249423, -0.27330293275657100, 10.510874050028260, 47.989750, 12.984500, -93.576479, -10.0],
                    [-0.25778835467293990, -0.28057927767632750, 11.510507877509921, 52.808000, 16.063875, -93.504979, -10.0],
                    [-0.24777219675676215, -0.28779323774242505, 12.509375498043902, 57.731750, 19.092500, -93.445016, -10.0],
                    [-0.23796699084652193, -0.29510625975440596, 13.509375345735329, 62.786750, 22.101000, -93.394073, -10.0],
                    [-0.22785287701054702, -0.30221098200350494, 14.507727481478634, 67.976875, 25.115875, -93.349547, -10.0],
                    [-0.22341693910140217, -0.30610439562840724, 15.009870255621223, 70.650125, 26.633375, -93.330210, -10.0],
                    [-0.21800221366851740, -0.30950033549205264, 15.507542476207073, 73.343000, 28.161500, -93.311360, -10.0],
                    [-0.21346254040160886, -0.31339680456990965, 16.009171507913727, 76.108250, 29.703375, -93.294785, -10.0],
                    [-0.20821606842705367, -0.31680014487519276, 16.507547237513325, 78.907625, 31.262125, -93.277723, -10.0],
                    [-0.20356182986295102, -0.32066862160791510, 17.008601568605542, 81.781875, 32.841000, -93.263260, -10.0],
                    [-0.19849298265545512, -0.32414055133336717, 17.507710839799360, 84.708125, 34.443750, -93.248066, -10.0],
                    [-0.19360491108270322, -0.32791598960334883, 18.007898567617170, 87.711875, 36.074250, -93.235229, -10.0],
                    [-0.18850285302241201, -0.33138267089740425, 18.506986904695648, 90.786375, 37.736750, -93.221660, -10.0],
                    [-0.18369770751773082, -0.33514959402719720, 19.007283337061917, 93.955875, 39.436125, -93.209960, -10.0],
                    [-0.17973557818122593, -0.33795464345342190, 19.406928947872096, 96.556750, 40.826125, -93.200047, -10.0]])
Ls = np.arange(0.,19.4,0.1)
Hs = np.interp(Ls, motors[:,2], motors[:,0])
Ks = np.interp(Ls, motors[:,2], motors[:,1])
HKLs = np.vstack([Hs, Ks, Ls]).T
tth = np.interp(Ls, motors[:,2], motors[:,3])
th  = np.interp(Ls, motors[:,2], motors[:,4])
chi = np.interp(Ls, motors[:,2], motors[:,5])
phi = np.interp(Ls, motors[:,2], motors[:,6])

HKLs_transpose = np.array([np.vstack((Hs, Ks, Ls))])
Bmat = np.array([[ 1.09177851e+00,  6.30338615e-01, -1.33704305e-16],
                 [ 0.00000000e+00,  1.26067723e+00, -1.33704305e-16],
                 [ 0.00000000e+00, -0.00000000e+00,  4.36029515e-01]])

Qs = np.squeeze(np.dot(Bmat,HKLs_transpose).transpose())

rixs = calc_RIXS_dimerTa(tth=tth, th=th, chi=chi, phi=phi, HKL=HKLs, **RIXS_params)
rixs_Mmap = dict(pol=[0,1], Qs=Qs, eloss=RIXS_params['eloss'], rixs=np.squeeze(rixs))
np.savez(witness.folder+'/pol/rixs_Mmap.npz', **rixs_Mmap)

conjugate_rixs = conjugate_RIXS_dimerTa(tth=tth, th=th, chi=chi, phi=phi, HKL=HKLs, **RIXS_params)
conjugate_rixs_Mmap = dict(pol=[0,1], Qs=Qs, eloss=RIXS_params['eloss'], rixs=np.squeeze(conjugate_rixs))
np.savez(witness.folder+'/pol/conjugate_rixs_Mmap.npz', **conjugate_rixs_Mmap)

# polarized, Emap, denominator calculation
omega_list = np.arange(-570,-540,0.3)

motors = np.vstack([[-0.2773941488281869, -0.2659741791152685, 9.51042684165467, 43.264375, 9.81525, -93.663173, -10.0],
                    [-0.26764896087249423, -0.273302932756571, 10.51087405002826, 47.98975, 12.9845, -93.576479, -10.0],
                    [-0.2577883546729399, -0.2805792776763275, 11.510507877509921, 52.808, 16.063875, -93.504979, -10.0],
                    [-0.24777219675676215, -0.28779323774242505, 12.509375498043902, 57.73175, 19.0925, -93.445016, -10.0],
                    [-0.23796699084652193, -0.29510625975440596, 13.509375345735329, 62.78675, 22.101, -93.394073, -10.0],
                    [-0.22785287701054702, -0.30221098200350494, 14.507727481478634, 67.976875, 25.115875, -93.349547, -10.0],
                    [-0.22341693910140217, -0.30610439562840724, 15.009870255621223, 70.650125, 26.633375, -93.33021, -10.0],
                    [-0.2180022136685174, -0.30950033549205264, 15.507542476207073, 73.343, 28.1615, -93.31136, -10.0],
                    [-0.21346254040160886, -0.31339680456990965, 16.009171507913727, 76.10825, 29.703375, -93.294785, -10.0],
                    [-0.20821606842705367, -0.31680014487519276, 16.507547237513325, 78.907625, 31.262125, -93.277723, -10.0],
                    [-0.20356182986295102, -0.3206686216079151, 17.008601568605542, 81.781875, 32.841, -93.26326, -10.0],
                    [-0.19849298265545512, -0.32414055133336717, 17.50771083979936, 84.708125, 34.44375, -93.248066, -10.0],
                    [-0.19360491108270322, -0.32791598960334883, 18.00789856761717, 87.711875, 36.07425, -93.235229, -10.0],
                    [-0.18850285302241201, -0.33138267089740425, 18.506986904695648, 90.786375, 37.73675, -93.22166, -10.0],
                    [-0.18369770751773082, -0.3351495940271972, 19.007283337061917, 93.955875, 39.436125, -93.20996, -10.0],
                    [-0.17973557818122593, -0.3379546434534219, 19.406928947872096, 96.55675, 40.826125, -93.200047, -10.0]])

L = 18.4
H = np.interp(L, motors[:,2], motors[:,0])
K = np.interp(L, motors[:,2], motors[:,1])
HKL = np.array([H, K, L])
tth = np.interp(L, motors[:,2], motors[:,3])
th  = np.interp(L, motors[:,2], motors[:,4])
chi = np.interp(L, motors[:,2], motors[:,5])
phi = np.interp(L, motors[:,2], motors[:,6])

denom_list = []
for omega in omega_list:
	denom_params = dict(T=9., Gam_c=2.47, omega=omega, folder=witness.folder)
	denom = QFI_denom_dimerTa(tth=tth, th=th, chi=chi, phi=phi, HKL=HKL, **denom_params)
	denom_list.append(np.squeeze(denom))
denom_Emap = dict(omega=omega_list, pol=[0,1], denom=np.array(denom_list))
np.savez(witness.folder+'/pol/denom_Emap.npz', **denom_Emap)

# polarized, Mmap, denominator calculation
denom_params = dict(T=9., Gam_c=2.47, omega=-559, folder=witness.folder)

motors = np.vstack([[-0.37135718, -0.19678939, 0.0,  6.35613593, -93.84443325,  -35.71702316, -10.],
                    [-0.36642012, -0.20042758, 0.5,  6.70426443, -70.27088312, -112.93945895, -10.],
                    [-0.36148305, -0.20406577, 1.0,  7.69383586, -54.60755422, -102.08468304, -10.],
                    [-0.35654599, -0.20770396, 1.5,  9.11950715, -42.55814882,  -98.79459525, -10.],
                    [-0.35160893, -0.21134215, 2.0, 10.81173739, -33.62642692,  -97.21722821, -10.],
                    [-0.34667186, -0.21498034, 2.5, 12.66610405, -26.87058629,  -96.29276610, -10.],
                    [-0.34173480, -0.21861853, 3.0, 14.62328021, -21.57673293,  -95.68563709, -10.],
                    [-0.33679773, -0.22225672, 3.5, 16.64946876, -17.27553243,  -95.25647221, -10.],
                    [-0.33186067, -0.22589491, 4.0, 18.72485802, -13.66522264,  -94.93705831, -10.],
                    [-0.32692361, -0.22953311, 4.5, 20.83746597, -10.54905286,  -94.69008224, -10.],
                    [-0.32198654, -0.23317130, 5.0, 22.97986626,  -7.79546702,  -94.49341877, -10.],
                    [-0.31704948, -0.23680949, 5.5, 25.14739707,  -5.31403908,  -94.33311852, -10.],
                    [-0.31211241, -0.24044768, 6.0, 27.33714508,  -3.04092539,  -94.19995153, -10.],
                    [-0.30717535, -0.24408587, 6.5, 29.54734754,  -0.92991142,  -94.08756742, -10.],
                    [-0.30223829, -0.24772406, 7.0, 31.77702859,   1.05323073,  -93.99145380, -10.],
                    [-0.29730122, -0.25136225, 7.5, 34.02577160,   2.93438842,  -93.90831624, -10.],
                    [-0.29236416, -0.25500044, 8.0, 36.29357337,   4.73352253,  -93.83569342, -10.],
                    [-0.28742710, -0.25863863, 8.5, 38.58074920,   6.46630300,  -93.77170940, -10.],
                    [-0.28249003, -0.26227682, 9.0, 40.88787072,   8.14524100,  -93.71490943, -10.],
                    [-0.27739414882818690, -0.26597417911526850, 9.5104268416546700, 43.264375,  9.815250, -93.663173, -10.0],
                    [-0.26764896087249423, -0.27330293275657100, 10.510874050028260, 47.989750, 12.984500, -93.576479, -10.0],
                    [-0.25778835467293990, -0.28057927767632750, 11.510507877509921, 52.808000, 16.063875, -93.504979, -10.0],
                    [-0.24777219675676215, -0.28779323774242505, 12.509375498043902, 57.731750, 19.092500, -93.445016, -10.0],
                    [-0.23796699084652193, -0.29510625975440596, 13.509375345735329, 62.786750, 22.101000, -93.394073, -10.0],
                    [-0.22785287701054702, -0.30221098200350494, 14.507727481478634, 67.976875, 25.115875, -93.349547, -10.0],
                    [-0.22341693910140217, -0.30610439562840724, 15.009870255621223, 70.650125, 26.633375, -93.330210, -10.0],
                    [-0.21800221366851740, -0.30950033549205264, 15.507542476207073, 73.343000, 28.161500, -93.311360, -10.0],
                    [-0.21346254040160886, -0.31339680456990965, 16.009171507913727, 76.108250, 29.703375, -93.294785, -10.0],
                    [-0.20821606842705367, -0.31680014487519276, 16.507547237513325, 78.907625, 31.262125, -93.277723, -10.0],
                    [-0.20356182986295102, -0.32066862160791510, 17.008601568605542, 81.781875, 32.841000, -93.263260, -10.0],
                    [-0.19849298265545512, -0.32414055133336717, 17.507710839799360, 84.708125, 34.443750, -93.248066, -10.0],
                    [-0.19360491108270322, -0.32791598960334883, 18.007898567617170, 87.711875, 36.074250, -93.235229, -10.0],
                    [-0.18850285302241201, -0.33138267089740425, 18.506986904695648, 90.786375, 37.736750, -93.221660, -10.0],
                    [-0.18369770751773082, -0.33514959402719720, 19.007283337061917, 93.955875, 39.436125, -93.209960, -10.0],
                    [-0.17973557818122593, -0.33795464345342190, 19.406928947872096, 96.556750, 40.826125, -93.200047, -10.0]])
Ls = np.arange(0.,19.4,0.1)
Hs = np.interp(Ls, motors[:,2], motors[:,0])
Ks = np.interp(Ls, motors[:,2], motors[:,1])
HKLs = np.vstack([Hs, Ks, Ls]).T
tth = np.interp(Ls, motors[:,2], motors[:,3])
th  = np.interp(Ls, motors[:,2], motors[:,4])
chi = np.interp(Ls, motors[:,2], motors[:,5])
phi = np.interp(Ls, motors[:,2], motors[:,6])

HKLs_transpose = np.array([np.vstack((Hs, Ks, Ls))])
Bmat = np.array([[ 1.09177851e+00,  6.30338615e-01, -1.33704305e-16],
                 [ 0.00000000e+00,  1.26067723e+00, -1.33704305e-16],
                 [ 0.00000000e+00, -0.00000000e+00,  4.36029515e-01]])

Qs = np.squeeze(np.dot(Bmat,HKLs_transpose).transpose())

denom = QFI_denom_dimerTa(tth=tth, th=th, chi=chi, phi=phi, HKL=HKLs, **denom_params)
denom_Mmap = dict(pol=[0,1], Qs=Qs, denom=np.squeeze(denom))
np.savez(witness.folder+'/pol/denom_Mmap.npz', **denom_Mmap)

# polarized, Emap, QFI for pure states
motors = np.vstack([[-0.2773941488281869, -0.2659741791152685, 9.51042684165467, 43.264375, 9.81525, -93.663173, -10.0],
                    [-0.26764896087249423, -0.273302932756571, 10.51087405002826, 47.98975, 12.9845, -93.576479, -10.0],
                    [-0.2577883546729399, -0.2805792776763275, 11.510507877509921, 52.808, 16.063875, -93.504979, -10.0],
                    [-0.24777219675676215, -0.28779323774242505, 12.509375498043902, 57.73175, 19.0925, -93.445016, -10.0],
                    [-0.23796699084652193, -0.29510625975440596, 13.509375345735329, 62.78675, 22.101, -93.394073, -10.0],
                    [-0.22785287701054702, -0.30221098200350494, 14.507727481478634, 67.976875, 25.115875, -93.349547, -10.0],
                    [-0.22341693910140217, -0.30610439562840724, 15.009870255621223, 70.650125, 26.633375, -93.33021, -10.0],
                    [-0.2180022136685174, -0.30950033549205264, 15.507542476207073, 73.343, 28.1615, -93.31136, -10.0],
                    [-0.21346254040160886, -0.31339680456990965, 16.009171507913727, 76.10825, 29.703375, -93.294785, -10.0],
                    [-0.20821606842705367, -0.31680014487519276, 16.507547237513325, 78.907625, 31.262125, -93.277723, -10.0],
                    [-0.20356182986295102, -0.3206686216079151, 17.008601568605542, 81.781875, 32.841, -93.26326, -10.0],
                    [-0.19849298265545512, -0.32414055133336717, 17.50771083979936, 84.708125, 34.44375, -93.248066, -10.0],
                    [-0.19360491108270322, -0.32791598960334883, 18.00789856761717, 87.711875, 36.07425, -93.235229, -10.0],
                    [-0.18850285302241201, -0.33138267089740425, 18.506986904695648, 90.786375, 37.73675, -93.22166, -10.0],
                    [-0.18369770751773082, -0.3351495940271972, 19.007283337061917, 93.955875, 39.436125, -93.20996, -10.0],
                    [-0.17973557818122593, -0.3379546434534219, 19.406928947872096, 96.55675, 40.826125, -93.200047, -10.0]])

L = 18.4
H = np.interp(L, motors[:,2], motors[:,0])
K = np.interp(L, motors[:,2], motors[:,1])
HKL = np.array([H, K, L])
tth = np.interp(L, motors[:,2], motors[:,3])
th  = np.interp(L, motors[:,2], motors[:,4])
chi = np.interp(L, motors[:,2], motors[:,5])
phi = np.interp(L, motors[:,2], motors[:,6])

omega = np.arange(-570,-540,0.3)

FQ = np.zeros((2, len(omega)), dtype=float)
for nom, om in enumerate(omega):
    FQ_params = dict(Gam_c=2.47, omega=om, folder=witness.folder)
    FQ_result = calc_FQ_dimerTa(tth=tth, th=th, chi=chi, phi=phi, HKL=HKL, **FQ_params)
    FQ[0][nom] = FQ_result[0]
    FQ[1][nom] = FQ_result[1]
FQ_Emap = dict(omega=omega, FQ=FQ)
np.savez(witness.folder+'/pol/FQ_Emap.npz', **FQ_Emap)

# polarized Mmap, QFI for pure states
motors = np.vstack([[-0.37135718, -0.19678939, 0.0,  6.35613593, -93.84443325,  -35.71702316, -10.],
                    [-0.36642012, -0.20042758, 0.5,  6.70426443, -70.27088312, -112.93945895, -10.],
                    [-0.36148305, -0.20406577, 1.0,  7.69383586, -54.60755422, -102.08468304, -10.],
                    [-0.35654599, -0.20770396, 1.5,  9.11950715, -42.55814882,  -98.79459525, -10.],
                    [-0.35160893, -0.21134215, 2.0, 10.81173739, -33.62642692,  -97.21722821, -10.],
                    [-0.34667186, -0.21498034, 2.5, 12.66610405, -26.87058629,  -96.29276610, -10.],
                    [-0.34173480, -0.21861853, 3.0, 14.62328021, -21.57673293,  -95.68563709, -10.],
                    [-0.33679773, -0.22225672, 3.5, 16.64946876, -17.27553243,  -95.25647221, -10.],
                    [-0.33186067, -0.22589491, 4.0, 18.72485802, -13.66522264,  -94.93705831, -10.],
                    [-0.32692361, -0.22953311, 4.5, 20.83746597, -10.54905286,  -94.69008224, -10.],
                    [-0.32198654, -0.23317130, 5.0, 22.97986626,  -7.79546702,  -94.49341877, -10.],
                    [-0.31704948, -0.23680949, 5.5, 25.14739707,  -5.31403908,  -94.33311852, -10.],
                    [-0.31211241, -0.24044768, 6.0, 27.33714508,  -3.04092539,  -94.19995153, -10.],
                    [-0.30717535, -0.24408587, 6.5, 29.54734754,  -0.92991142,  -94.08756742, -10.],
                    [-0.30223829, -0.24772406, 7.0, 31.77702859,   1.05323073,  -93.99145380, -10.],
                    [-0.29730122, -0.25136225, 7.5, 34.02577160,   2.93438842,  -93.90831624, -10.],
                    [-0.29236416, -0.25500044, 8.0, 36.29357337,   4.73352253,  -93.83569342, -10.],
                    [-0.28742710, -0.25863863, 8.5, 38.58074920,   6.46630300,  -93.77170940, -10.],
                    [-0.28249003, -0.26227682, 9.0, 40.88787072,   8.14524100,  -93.71490943, -10.],
                    [-0.27739414882818690, -0.26597417911526850, 9.5104268416546700, 43.264375,  9.815250, -93.663173, -10.0],
                    [-0.26764896087249423, -0.27330293275657100, 10.510874050028260, 47.989750, 12.984500, -93.576479, -10.0],
                    [-0.25778835467293990, -0.28057927767632750, 11.510507877509921, 52.808000, 16.063875, -93.504979, -10.0],
                    [-0.24777219675676215, -0.28779323774242505, 12.509375498043902, 57.731750, 19.092500, -93.445016, -10.0],
                    [-0.23796699084652193, -0.29510625975440596, 13.509375345735329, 62.786750, 22.101000, -93.394073, -10.0],
                    [-0.22785287701054702, -0.30221098200350494, 14.507727481478634, 67.976875, 25.115875, -93.349547, -10.0],
                    [-0.22341693910140217, -0.30610439562840724, 15.009870255621223, 70.650125, 26.633375, -93.330210, -10.0],
                    [-0.21800221366851740, -0.30950033549205264, 15.507542476207073, 73.343000, 28.161500, -93.311360, -10.0],
                    [-0.21346254040160886, -0.31339680456990965, 16.009171507913727, 76.108250, 29.703375, -93.294785, -10.0],
                    [-0.20821606842705367, -0.31680014487519276, 16.507547237513325, 78.907625, 31.262125, -93.277723, -10.0],
                    [-0.20356182986295102, -0.32066862160791510, 17.008601568605542, 81.781875, 32.841000, -93.263260, -10.0],
                    [-0.19849298265545512, -0.32414055133336717, 17.507710839799360, 84.708125, 34.443750, -93.248066, -10.0],
                    [-0.19360491108270322, -0.32791598960334883, 18.007898567617170, 87.711875, 36.074250, -93.235229, -10.0],
                    [-0.18850285302241201, -0.33138267089740425, 18.506986904695648, 90.786375, 37.736750, -93.221660, -10.0],
                    [-0.18369770751773082, -0.33514959402719720, 19.007283337061917, 93.955875, 39.436125, -93.209960, -10.0],
                    [-0.17973557818122593, -0.33795464345342190, 19.406928947872096, 96.556750, 40.826125, -93.200047, -10.0]])
Ls = np.arange(0.,19.4,0.1)
Hs = np.interp(Ls, motors[:,2], motors[:,0])
Ks = np.interp(Ls, motors[:,2], motors[:,1])
HKLs = np.vstack([Hs, Ks, Ls]).T
tths = np.interp(Ls, motors[:,2], motors[:,3])
ths  = np.interp(Ls, motors[:,2], motors[:,4])
chis = np.interp(Ls, motors[:,2], motors[:,5])
phis = np.interp(Ls, motors[:,2], motors[:,6])

HKLs_transpose = np.array([np.vstack((Hs, Ks, Ls))])
Bmat = np.array([[ 1.09177851e+00,  6.30338615e-01, -1.33704305e-16],
                 [ 0.00000000e+00,  1.26067723e+00, -1.33704305e-16],
                 [ 0.00000000e+00, -0.00000000e+00,  4.36029515e-01]])

Qs = np.squeeze(np.dot(Bmat,HKLs_transpose).transpose())

FQ_params = dict(Gam_c=2.47, omega=-559, folder=witness.folder)

FQ = np.zeros((2, len(Ls)), dtype=float)
for i in range(len(Ls)):
    FQ_result = calc_FQ_dimerTa(tth=tths[i], th=ths[i], phi=phis[i], HKL=HKLs[i], **FQ_params)
    FQ[0][i] = FQ_result[0]
    FQ[1][i] = FQ_result[1]
FQ_Mmap = dict(momenta=Qs, FQ=FQ)
np.savez(witness.folder+'/pol/FQ_Mmap.npz', **FQ_Mmap)